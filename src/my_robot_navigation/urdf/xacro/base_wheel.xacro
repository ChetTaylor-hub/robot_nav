<!-- 根标签，必须声明 xmlns:xacro -->
<robot name="my_base" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- 封装变量、常量 -->
    <!-- PI 值设置精度需要高一些，否则后续车轮翻转量计算时，可能会出现肉眼不能察觉的车轮倾斜，从而导致模型抖动 -->
    <xacro:property name="PI" value="3.1415926" />
    <!-- 宏:黑色设置 -->
    <material name="black">
        <color rgba="0.0 0.0 0.0 1.0" />
    </material>
    <!-- 底盘属性 -->
    <xacro:property name="base_wheel_footprint_radius" value="0.001" /> <!-- base_wheel_footprint 半径  -->
    <xacro:property name="base_wheel_link_radius" value="0.3" /> <!-- base_wheel_link 半径 -->
    <xacro:property name="base_wheel_link_length" value="0.3" /> <!-- base_wheel_link 长 -->
    <xacro:property name="earth_space" value="0.15" /> <!-- 离地间距 -->
    <xacro:property name="base_wheel_link_m" value="1.0" /> <!-- 质量  -->

    <!-- 底盘 -->
    <link name="base_wheel_footprint">
        <visual>
            <geometry>
                <sphere radius="${base_wheel_footprint_radius}" />
            </geometry>
        </visual>
    </link>

    <link name="base_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="${base_wheel_link_radius}" length="${base_wheel_link_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="yellow">
                <color rgba="0.5 0.3 0.0 0.5" />
            </material>
        </visual>
        <!-- 与rviz不同（1）：gazebo的urdf或xacro文件中必须设置碰撞 -->
        <collision>
            <geometry>
                <cylinder radius="${base_wheel_link_radius}" length="${base_wheel_link_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <!-- 与rviz不同（2）：使用在head.xacro中封装过的inertial标签 -->
        <xacro:cylinder_inertial_matrix m="${base_wheel_link_m}" r="${base_wheel_link_radius}"
            h="${base_wheel_link_length}" />
    </link>


    <joint name="base_wheel_link2base_wheel_footprint" type="fixed">
        <parent link="base_wheel_footprint" />
        <child link="base_wheel_link" />
        <origin xyz="0 0 ${earth_space + base_wheel_link_length / 2 }" />
    </joint>

    <gazebo reference="base_wheel_link">
        <!-- 与rviz不同（3）：重新设置颜色 -->
        <material>Gazebo/Yellow</material>
    </gazebo>

    <!-- 驱动轮 -->
    <!-- 驱动轮属性 -->
    <xacro:property name="wheel_radius" value="0.1" /> <!-- 半径 -->
    <xacro:property name="wheel_length" value="0.045" /> <!-- 宽度 -->
    <xacro:property name="wheel_m" value="0.10" /> <!-- 质量  -->

    <!-- 驱动轮宏实现 -->
    <xacro:macro name="add_wheels" params="name flag">
        <link name="${name}_wheel">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
                <material name="black" />
            </visual>
            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
            </collision>
            <xacro:cylinder_inertial_matrix m="${wheel_m}" r="${wheel_radius}" h="${wheel_length}" />
        </link>

        <joint name="${name}_wheel2base_wheel_link" type="continuous">
            <parent link="base_wheel_link" />
            <child link="${name}_wheel" />
            <origin
                xyz="0 ${flag * base_wheel_link_radius} ${-(earth_space + base_wheel_link_length / 2 - wheel_radius) }" />
            <axis xyz="0 1 0" />
        </joint>

        <gazebo reference="${name}_wheel">
            <material>Gazebo/Red</material>
        </gazebo>
    </xacro:macro>

    <xacro:add_wheels name="left" flag="1" />
    <xacro:add_wheels name="right" flag="-1" />

    <!-- 支撑轮 -->
    <!-- 支撑轮属性 -->
    <xacro:property name="support_wheel_radius" value="0.0075" /> <!-- 支撑轮半径 -->
    <xacro:property name="support_wheel_m" value="0.03" /> <!-- 质量  -->

    <!-- 支撑轮宏 -->
    <xacro:macro name="add_support_wheel" params="name flag">
        <link name="${name}_wheel">
            <visual>
                <geometry>
                    <sphere radius="${support_wheel_radius}" />
                </geometry>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <material name="black" />
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${support_wheel_radius}" />
                </geometry>
                <origin xyz="0 0 0" rpy="0 0 0" />
            </collision>
            <xacro:sphere_inertial_matrix m="${support_wheel_m}" r="${support_wheel_radius}" />
        </link>

        <joint name="${name}_wheel2base_wheel_link" type="continuous">
            <parent link="base_wheel_link" />
            <child link="${name}_wheel" />
            <origin
                xyz="${flag * (base_wheel_link_radius - support_wheel_radius)} 0 ${-(base_wheel_link_length / 2 + earth_space / 2)}" />
            <axis xyz="1 1 1" />
        </joint>

        <gazebo reference="${name}_wheel">
            <material>Gazebo/Red</material>
        </gazebo>
    </xacro:macro>

    <xacro:add_support_wheel name="front" flag="1" />
    <xacro:add_support_wheel name="back" flag="-1" />


</robot>